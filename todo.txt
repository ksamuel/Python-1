- Write a summary for builtins
- Chapitre: Migrer de 2.4 à 2.7
- Chaptire: Tox
- Changer couleur des liens
- Trouver un moyen d'exporter en epub
- Trouver un moyen de rendre le copier/coller sur PDF correct
- Insérer des QRcodes et liens dans le livre pour chaque snippet
- chapter on dependancies
- say that automated tools sometimes overdo it: map, reduce, etc
- compare 2to6 with the surchouche
- rajouter round() dans les builtins: https://stackoverflow.com/questions/10825926/python-3-x-rounding-behavior/10825998#10825998
- part on packaging
- parler de comp et des autres méthodes __cmp__()
- bouger print et sorting dans premier chapitre: Syntax and logic
- Faire un listing des autres ressource sur le portage de Python:
   * https://portingguide.readthedocs.io/en/latest/comparisons.html
   * https://python-future.or
   * six
   * 2to3
   * https://docs.python.org/3/whatsnew/3.0.html
   * https://pyreadiness.org/2.7/
   * https://python3statement.org/practicalities/
   * https://github.com/python-modernize/python-modernize
   * http://python3porting.com/
- metaclasses, __metaclass__, META
- install 2to3 from Python 3!
- prefix u'' qui a été retiré puis réintroduit
- mettre sur les sections une iconne (fixable par python-future, 2to3, futurize)
- talk about mypy
- page de licence: elegant book, latex, ubuntu, vscode,, python, manaspace font
- trouver pourquoi "too␣many"
- fix raw\_input
- align python2/3 bytes/str comparison table
- bytes() in Python future for iteration
- strats for encoded file path
- check we got all from http://www.dabeaz.com/python3io_2010/MasteringIO.pdf
- say that p3 string take x2 to x4 more space and copy is slower for large string
- dire la valeur par défaut de l'necoding de open()
- attention avec python 2: >>> with open('/tmp/test', 'wb') as f: f.write(u'test')


>>> f = open("jalape\xf1o.txt","w")
>>> f.write("Bwahahahaha!\n")
>>> f.close()

>>> f = open("jalape\xf1o.txt")Traceback (most recent call last):...IOError: [Errno 2] No such file or directory: 'jalapeño.txt'>>>

https://morepypy.blogspot.com/2019/10/pypy-v72-released.html



In early versions of Python 3, such names were silently discarded (made invisible).  Yikes

- ('re', 'ASCII','stat', 'ST_MODE'),

- ajouter non-ascii-bytes-literals pylint et voir autres réglages


leanup of the sys module: removed sys.exitfunc(), sys.exc_clear(), sys.exc_type, sys.exc_value, sys.exc_traceback.

Cleanup of the array.array type: the read() and write() methods are gone; use fromfile() and tofile() instead. Also, the 'c' typecode for array is gone – use either 'b' for bytes or 'u' for Unicode characters.

Cleanup of the operator module: removed sequenceIncludes() and isCallable().
Cleanup of the thread module: acquire_lock() and release_lock() are gone; use acquire() and release() instead.
Cleanup of the random module: removed the jumpahead() API.
The new module is gone.
The functions os.tmpnam(), os.tempnam() and os.tmpfile() have been removed in favor of the tempfile module.
The tokenize module has been changed to work with bytes. The main entry point is now tokenize.tokenize(), instead of generate_tokens.
string.letters and its friends (string.lowercase and string.uppercase) are gone. Use string.ascii_letters etc. instead. (The reason for the removal is that string.letters and friends had locale-specific behavior, which is a bad idea for such attractively-named global “constants”.)
Renamed module __builtin__ to builtins (removing the underscores, adding an ‘s’). The __builtins__ variable found in most global namespaces is unchanged. To modify a builtin, you should use builtins, not __builtins__!


- https://github.com/squeaky-pl/portable-pypy


There is a catastrophic bug in the Python curses module in 3.4.0: http://bugs.python.org/issue21088
